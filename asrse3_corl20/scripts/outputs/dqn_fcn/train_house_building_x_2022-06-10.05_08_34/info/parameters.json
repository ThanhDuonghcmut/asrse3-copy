{"action_selection": "egreedy", "action_sequence": "xyrp", "alg": "dqn_fcn", "batch_size": 32, "buffer": "normal", "buffer_size": 100000, "critic_fc": "1024*3", "ddpg_bc": true, "ddpg_bc_q_filter": false, "ddpg_tau": 0.01, "device_name": "cuda", "env": "house_building_x", "explore": 0, "fast_mode": true, "fill_buffer": false, "fill_buffer_deconstruct": false, "final_eps": 0.0, "fixed_eps": true, "gamma": 0.9, "goal": "1b1r", "half_rotation": true, "heightmap_size": 90, "in_hand_mode": "raw", "init_eps": 1.0, "load_buffer": null, "load_model_pre": null, "load_n": 1000000, "load_sub": null, "log_pre": "outputs", "log_sub": null, "lr": 5e-05, "margin": "l", "margin_beta": 100, "margin_l": 0.1, "margin_weight": 0.1, "max_episode": 10, "max_episode_steps": 10, "max_z": 0.12, "min_z": 0.02, "model": "resucat", "no_bar": false, "note": null, "num_objects": 3, "num_processes": 5, "num_rotations": 8, "num_zs": 16, "patch_div": 1.0, "patch_mul": 1.0, "per_alpha": 0.6, "per_beta": 0.4, "per_eps": 1e-06, "per_expert_eps": 0.1, "perfect_grasp": false, "perfect_place": false, "perlin": 0.0, "planner_episode": 0, "planner_pos_noise": 0, "planner_rot_noise": 0, "pre_train_step": 0, "q2_model": "cnn", "q3_input": "proj", "random_orientation": true, "render": false, "reward_type": "sparse", "robot": "kuka", "save_freq": 500, "seed": null, "simulate_grasp": true, "simulator": "pybullet", "sl": false, "target_update_freq": 100, "test": false, "time_limit": 10000, "training_iters": 1, "training_offset": 1000, "workspace_size": 0.3, "model_shape": "[ResUCatShared(\n  (conv_down_1): Sequential(\n    (enc-conv0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (enc-relu0): ReLU(inplace=True)\n    (enc-res1): BasicBlock(\n      (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n    )\n  )\n  (conv_down_2): Sequential(\n    (enc-pool2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (enc-res2): BasicBlock(\n      (downsample): Sequential(\n        (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n      (conv1): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n    )\n  )\n  (conv_down_4): Sequential(\n    (enc-pool3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (enc-res3): BasicBlock(\n      (downsample): Sequential(\n        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n    )\n  )\n  (conv_down_8): Sequential(\n    (enc-pool4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (enc-res4): BasicBlock(\n      (downsample): Sequential(\n        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n    )\n  )\n  (conv_down_16): Sequential(\n    (enc-pool5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (enc-res5): BasicBlock(\n      (downsample): Sequential(\n        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n    )\n    (enc-conv5): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n  )\n  (conv_up_8): Sequential(\n    (dec-res1): BasicBlock(\n      (downsample): Sequential(\n        (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n      (conv1): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n    )\n    (dec-conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n  )\n  (conv_up_4): Sequential(\n    (dec-res2): BasicBlock(\n      (downsample): Sequential(\n        (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n      (conv1): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n    )\n    (dec-conv2): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n  )\n  (conv_up_2): Sequential(\n    (dec-res3): BasicBlock(\n      (downsample): Sequential(\n        (0): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n      (conv1): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n    )\n    (dec-conv3): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n  )\n  (conv_up_1): Sequential(\n    (dec-res1): BasicBlock(\n      (downsample): Sequential(\n        (0): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n      (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n    )\n  )\n  (conv_cat_in_hand): Sequential(\n    (enc-res6): BasicBlock(\n      (downsample): Sequential(\n        (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n      (conv1): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (relu): ReLU(inplace=True)\n      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n    )\n  )\n  (in_hand_conv): InHandConv(\n    (in_hand_conv): Sequential(\n      (cnn_conv1): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1))\n      (cnn_relu1): ReLU(inplace=True)\n      (cnn_conv2): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))\n      (cnn_relu2): ReLU(inplace=True)\n      (cnn_pool2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n      (cnn_conv3): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1))\n      (cnn_relu3): ReLU(inplace=True)\n    )\n  )\n  (pick_q_values): Conv2d(32, 1, kernel_size=(1, 1), stride=(1, 1))\n  (place_q_values): Conv2d(32, 1, kernel_size=(1, 1), stride=(1, 1))\n)]"}